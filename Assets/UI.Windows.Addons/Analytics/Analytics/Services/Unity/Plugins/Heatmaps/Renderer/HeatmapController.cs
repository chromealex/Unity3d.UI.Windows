/// <summary>
/// Heat map controller.
/// </summary>
/// This is an exceedingly simple example of a runtime controller
/// for the HeatmapMeshRenderer. It's not exceptionally flexible,
/// but it teaches you everything you need to know if you want to
/// use the HeatmapMeshRenderer as a runtime component. To use:
/// 
/// 1. If you don’t have a Resources folder, create one.
/// 2. In the Resources folder, place a JSON file generated by aggregation.
/// 3. In your game, create an empty GameObject. Name it ‘MyRuntimeHeatmap’.
/// 4. Add the HeatmapController MonoBehaviour to ‘MyRuntimeHeatmap’
/// 5. Look at the Inspector for ‘MyRuntimeHeatmap’. Under Heat Map Controller, find the Data Path field.
/// 6. Type in the name of your JSON file.
/// 7. Hit Play! 


using System;
using System.Collections.Generic;
using UnityAnalyticsHeatmap;
using UnityEngine;


[RequireComponent(typeof(HeatmapMeshRenderer))]
public class HeatmapController : MonoBehaviour
{
    public string dataPath = "";
    public string[] options;
    public int optionIndex = 0;
    public float pointSize = 10;

    HeatmapDataParser m_DataParser = new HeatmapDataParser();
    Dictionary<string, HeatPoint[]> m_Data;

    static Color s_HighDensityColor = new Color(1f, 0, 0, .1f);
    static Color s_MediumDensityColor = new Color(1f, 1f, 0, .1f);
    static Color s_LowDensityColor = new Color(0, 1f, 1f, .1f);

    Color[] m_Colors = new Color[]{ s_LowDensityColor, s_MediumDensityColor, s_HighDensityColor };
    float[] m_Thresholds = new float[]{ .1f, .9f };

    float m_MaxDensity = 0;
    float m_MaxTime = 0;

    void Start()
    {
        // If there's a path, load data
        if (!String.IsNullOrEmpty(dataPath))
        {
            LoadData();
        }
    }

    void LoadData()
    {
        // Use the parser to load data
        m_DataParser.LoadData(dataPath, parseHandler, true);
    }

    /// <summary>
    /// Once loaded, returns all the important info.
    /// </summary>
    /// <param name="heatData">A dictionary of all the heat data.</param>
    /// <param name="maxDensity">The maximum data density.</param>
    /// <param name="maxTime">The maximum time from the data.</param>
    /// <param name="options">The list of possible options (usually event names).</param>
    void parseHandler(Dictionary<string, HeatPoint[]> heatData, float maxDensity, float maxTime, string[] options)
    {
        m_Data = heatData;
        this.options = options;
        m_MaxDensity = maxDensity;
        m_MaxTime = maxTime;
        Render();
    }

    /// <summary>
    /// Renders the heatmap
    /// </summary>
    void Render()
    {
        var r = gameObject.GetComponent<IHeatmapRenderer>();
        r.allowRender = true;
        r.pointSize = pointSize;
        r.UpdateColors(m_Colors);
        r.UpdateThresholds(m_Thresholds);
        r.UpdateTimeLimits(0, m_MaxTime);
        r.UpdateRenderStyle(RenderShape.Triangle, RenderDirection.YZ);
        r.UpdatePointData(m_Data[options[optionIndex]], m_MaxDensity);
        r.RenderHeatmap();
    }
}
