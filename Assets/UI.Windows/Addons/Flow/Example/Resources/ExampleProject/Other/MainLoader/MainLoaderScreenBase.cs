//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UI.Windows Flow Addon.
//     Do not change anything in this file because it was auto-generated by FlowCompiler.
//     See more: https://github.com/chromealex/Unity3d.UI.Windows
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.UI.Windows;
using UnityEngine.UI.Windows.Types;

namespace ExampleProject.UI.Other.MainLoader {

	public class MainLoaderScreenBase : LayoutWindowType {
		
		/// <summary>
		/// Flows to the UserInfo.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Other.UserInfo.UserInfoScreen
		/// </summary>
		/// <returns>UserInfo</returns>
		public virtual ExampleProject.UI.Other.UserInfo.UserInfoScreen FlowUserInfo() {
			
			return this.INTERNAL_FlowUserInfo(hide: false);
			
		}
		
		/// <summary>
		/// Flows to the UserInfo.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Other.UserInfo.UserInfoScreen
		/// </summary>
		/// <returns>UserInfo</returns>
		public virtual ExampleProject.UI.Other.UserInfo.UserInfoScreen FlowHideUserInfo() {
			
			return this.INTERNAL_FlowUserInfo(hide: true);
			
		}
		
		private ExampleProject.UI.Other.UserInfo.UserInfoScreen INTERNAL_FlowUserInfo(bool hide, System.Action<ExampleProject.UI.Other.UserInfo.UserInfoScreen> onParametersPassCall = null, System.Action<ExampleProject.UI.Other.UserInfo.UserInfoScreen> onInstance = null) {
			
			return WindowSystemFlow.DoFlow<ExampleProject.UI.Other.UserInfo.UserInfoScreen>(this, 18, 45, hide, onParametersPassCall, onInstance);
			
		}
				
		/// <summary>
		/// Call the A/B Test.
		/// Use this method to filter users.
		/// This method doesn't hide current window.
		/// </summary>
		public virtual void FlowABTest(
			System.Action<int> onCondition = null,
			System.Action onAnyOther = null) {
			
			this.INTERNAL_FlowABTest(false, onCondition, onAnyOther);
			
		}
		
		/// <summary>
		/// Call the A/B Test.
		/// Use this method to filter users.
		/// This method hides current window.
		/// </summary>
		public virtual void FlowHideABTest(
			System.Action<int> onCondition = null,
			System.Action onAnyOther = null) {
			
			this.INTERNAL_FlowABTest(true, onCondition, onAnyOther);
			
		}
		
		private void INTERNAL_FlowABTest(
			bool hide,
			System.Action<int> onCondition = null,
			System.Action onAnyOther = null) {
			
			var window = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetWindow(44);
			if (window.IsABTest() == true) {
				
				AttachItem attachItem;
				var wayId = window.abTests.Resolve(window, out attachItem);
				
				System.Action<AttachItem, bool>[] ways = new System.Action<AttachItem, bool>[] {
					(item, h) => WindowSystemFlow.DoFlow<ExampleProject.UI.Menu.MainMenu.MainMenuScreen>(this, item, h, null), (item, h) => WindowSystemFlow.DoFlow<ExampleProject.UI.Other.Error.ErrorScreen>(this, item, h, null)
				};
				
				if (wayId == 0) {
					
					if (onAnyOther != null) onAnyOther.Invoke();
					
				} else {
					
					if (onCondition != null) onCondition.Invoke(wayId);
					
				}
				
				var way = ways[wayId];
				if (way != null) way.Invoke(attachItem, hide);
				
			}
			
		}
		
	}

}